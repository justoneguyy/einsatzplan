generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// TODO: maybe separate this into an additional profile model
model Employee {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String
  lastName        String
  initials        String    // used when the profilePicture is not set
  email           String
  profilePicture  String?

  account         Account?
  roleId          String    @db.ObjectId
  role            Role      @relation(fields: [roleId], references: [id])
  groups          EmployeeGroup[]
  tasks           EmployeeTask[]
  availabilityId  String?        @db.ObjectId
  availability    Availability?  @relation(fields: [availabilityId], references: [id])
}

// maybe use a boolean instead
enum AccountStatusNames {
  active
  inactive
}

model Account {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  username    String
  password    String
  status      AccountStatusNames
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId  String    @unique @db.ObjectId
}


enum RoleNames {
  user
  admin
}

model Role {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        RoleNames
  description String?

  employees   Employee[]
}

// do not use enums at the current time because of not being able to actually remap them for the application. more on this: https://github.com/prisma/prisma/issues/8446
// enum GroupNames {
//   Anwendungsentwickler
//   Systemintegrator
//   Auszubildener
//   Umschueler            @map("Umsch√ºler")
//   Rufbereitschaft
// }

model Group {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?

  employeeGroups  EmployeeGroup[]
}

model EmployeeGroup {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId

  employeeId  String    @db.ObjectId
  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  groupId     String    @db.ObjectId
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([employeeId, groupId])
}

model Task {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  dateFrom      DateTime
  dateTil       DateTime
  timeFrom      String?
  timeTil       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  employees EmployeeTask[]
}

model EmployeeTask {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId

  employeeId  String    @db.ObjectId
  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  taskId      String    @db.ObjectId
  task        Task      @relation(fields: [taskId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([employeeId, taskId])
}

model Availability {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  color       String

  employees   Employee[]
}
