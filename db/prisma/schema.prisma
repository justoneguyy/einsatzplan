generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String
  lastName        String
  initials        String          // used if the profilePicture is not set
  email           String
  profilePicture  String?

  // account         Account?
  roleId          String          @db.ObjectId
  role            Role            @relation(fields: [roleId], references: [id])
  groups          UserGroup[]
  tasks           UserTask[]
  vacations       Vacation[]
  sicknesses      Sickness[]
  onCallServices  OnCallService[]
}

// model Account {
//   id          String              @id @default(auto()) @map("_id") @db.ObjectId
//   username    String
//   password    String
//   status      String              // active, inactive (there is an enum in /data/enums.ts for this)
//   createdAt   DateTime            @default(now())
//   updatedAt   DateTime            @updatedAt

//   user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId      String              @unique @db.ObjectId
// }

enum RoleNames {
  user
  admin
}

model Role {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        RoleNames
  description String?

  users       User[]
}

// do not use enums at the current time because of not being able to actually remap them for the application. more on this: https://github.com/prisma/prisma/issues/8446
// enum GroupNames {
//   Anwendungsentwickler
//   Systemintegrator
//   Auszubildener
//   Umschueler            @map("UmschÃ¼ler")
//   Rufbereitschaft
// }

model Group {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?

  users           UserGroup[]
}

model UserGroup {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId

  userId  String  @db.ObjectId
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  groupId String  @db.ObjectId
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

// TODO: add a general/etc. model for e.g. berufsschule, RZ- Dienst u. Service- Einsatz
// I think I should add a general modal with props like cell color etc.

// TODO: add cell background and text color prop (by default none)
model Task {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  dateFrom      DateTime
  dateTo        DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  users UserTask[]
}

model UserTask {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId

  userId  String  @db.ObjectId
  user    User    @relation(fields: [userId], references: [id], onDelete: NoAction)

  taskId  String  @db.ObjectId
  task    Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId])
}

// TODO: add other 'activities'?

// either as said below or in a more 'modern' way (like only showing the available users (this should be filterable) or these should be shown at the bottom? idk yet)
// cell background should be green
// text color should be primary
model Vacation {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  type          String
  duration      String      // halbtags, ganztags (there is an enum in /data/enums.ts for this)
  dateFrom      DateTime
  dateTo        DateTime
  // TODO: add these somewhat later on (if this is added, the vacation type should only be of type urlaub -> create a new model for ueberstundenabbau)
  // numberOfDays  Int
  // numberofDaysTaken Int

  // one to many (one user can have multiple vacations)
  userId        String?     @db.ObjectId
  user          User?       @relation(fields: [userId], references: [id])
}

// cell background should be primary
// text color should be red
model Sickness {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  title         String          // krank, Arztbesuch (there is an enum in /data/enums.ts for this)
  dateFrom      DateTime
  dateTo        DateTime

  // one to many (one user can have multiple sicknesses)
  userId        String?         @db.ObjectId
  user          User?           @relation(fields: [userId], references: [id])
}

// since the duration doesnt seem to be consistens, the service wont be auto assigned to the users of group 'Rufbereitschaft')
// TODO: either style it as below or in a more 'modern' way (like a badge or something. maybe even a notification for the user who has it)
// the onCallService should be hidable
// cell background should be light/baby blue
// text color should be primary
model OnCallService {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  dateFrom      DateTime    // TODO: create a default preset of one week (7 days)
  dateTo        DateTime
  count         Int?        // how many times the user had the onCallService (this is based on a on year period; then it should be reset) the count is currently on the column sunday

  // one to many (one user can have multiple onCallServices)
  userId        String?     @db.ObjectId
  user          User?       @relation(fields: [userId], references: [id])
}

// TODO: Berufsschultage (the user/apprentice should be able to set his own days for each year (e.g. { year: 1, days: ['monday', 'tuesday']}; it should be populated until summer holidays for each year. after the new year begins) -> add this in the settings and maybe add a toast notification on login, if no days are set yet. or let the admin hadnle this?), (cell background color: yellow, text color: primary)
// currently changing weeks are not supported (e.g. one week school, one week work etc.)
model VocationalSchoolDay {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  day       String    // monday, tuesday, wednesday, thursday, friday
  year      Int
}


// Feiertage: https://openholidaysapi.org/PublicHolidays?countryIsoCode=DE&languageIsoCode=DE&validFrom=2023-01-01&validTo=2025-12-31&subdivisionCode=DE-NI
// Schulferien: https://openholidaysapi.org/SchoolHolidays?countryIsoCode=DE&languageIsoCode=DE&validFrom=2023-01-01&validTo=2025-12-31&subdivisionCode=DE-NI
// the date range can only be of max 2 years per api call (e.g. validFrom=2023-01-01&validTo=2025-12-31)
// we will populate with two calls til the end of 2027
// 2022-01-01 - 2024-12-31 & 2025-01-01 - 2027-12-31
// TODO: Holidays (use an api for this. Populate the current and next 2 years ahead and save it as a separate model. this way we will have them, even if the api is down. use a task scheduler like node-cron for this which fetches the secondth year from now.), (cell background color: light green, text color: primary)
model Holiday {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  date      DateTime
}

model SchoolHoliday {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  dateFrom  DateTime
  dateTo    DateTime
}

